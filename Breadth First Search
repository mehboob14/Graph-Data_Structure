//Contribute By Mehboob
#include<iostream>
#include<vector>
#include<queue>

using namespace std;

template<typename T>
class Graph 
{
    vector<vector<T>> adj;

public:
    Graph(int V);
    void displaylist(int V);
    void addedge(T u, T v, bool direction);
    void BFS(const vector<vector<T>>& adjlist, T source);
};

template<typename T>
Graph<T>::Graph(int V){
    adj.resize(V + 1);
}

template<typename T>
void Graph<T>::addedge(T u, T v, bool direction){
    adj[u].push_back(v);
    if(direction){
        adj[v].push_back(u);
    }
}

template<typename T>
void Graph<T>::BFS(const vector<vector<T>>& adjlist, T source){
    int size = adjlist.size();
    vector<T> d(size, -1);
    vector<T> predecessor(size, -1);
    vector<bool> visited(size, false);

    queue<T> Q; 
    Q.push(source);
    visited[source] = true;

    while(!Q.empty()){
        T u = Q.front();
        Q.pop();
        cout << u << " ";

        for(T v : adjlist[u]){
            if(!visited[v]){
                visited[v] = true;
                d[v] = d[u] + 1;
                predecessor[v] = u;
                Q.push(v);
            }
        }
    }
    cout << endl;
}

template<typename T>
void Graph<T>::displaylist(int V){
    for(int i = 0; i < V; i++){
        cout << i << " -> ";
        for(T node : adj[i]){
            cout << node << ",";
        }
        cout << endl;
    }
}
int main(){
    int vertex = 7;
    vector<vector<int>> adj = {
        {1, 2},
        {0, 3, 4},
        {0, 5, 6},
        {1},
        {1},
        {2},
        {2}
    };

    Graph<int> G(vertex);
    for(int i = 0; i < vertex; ++i) {
        for(int j = 0; j < adj[i].size(); ++j) {
            G.addedge(i, adj[i][j], true);
        }
    }

    G.BFS(adj, 0);

    return 0;
}
